# ADHD Coach App Implementation Plan

## Core Concept
Build an LLM-powered ADHD coach that provides accountability through messaging platforms. The app will use both default check-ins and dynamic scheduling determined by the LLM to follow up with users at optimal times.

## System Components

### 1. Scheduling Engine
- **Default Triggers**: Morning and evening check-ins based on user preferences
- **Dynamic Scheduling**: Extract time expressions from LLM responses to schedule follow-ups
- **Implementation**: Use cron-based scheduling with ability to create new schedule entries

### 2. LLM Integration
- **System Prompt**: Engineer prompt for ADHD coaching that includes follow-up timing instructions
- **Conversation Handling**: Maintain context while keeping within token limits
- **Output Parsing**: Extract scheduling instructions from LLM responses

### 3. Goal Tracking System
- **Structure**: Store long-term goals, sub-goals, action items, and completion status
- **Progress Monitoring**: Track incremental progress toward objectives

### 4. Messaging Integration
- **Platform Options**: WhatsApp (via Business API) or iMessage (via LoLLM approach)
- **Implementation**: Webhook handlers for incoming messages, API for outgoing

### 5. User Database
- **Profile Storage**: User preferences, goals, and conversation history
- **Privacy Focus**: Secure storage with local-first approach where possible

## Implementation Phases

### Phase 1: Core Infrastructure
1. Set up server environment with basic scheduling
2. Implement LLM interface with coaching prompt
3. Create user database schema
4. Build simple test harness

### Phase 2: Scheduling System
1. Implement default triggers (morning/evening)
2. Build time expression extraction system
3. Create scheduling queue
4. Add monitoring tools

### Phase 3: Messaging
1. Implement one messaging platform integration
2. Build message routing system
3. Add conversation history tracking

### Phase 4: Coaching Logic
1. Refine coaching prompt
2. Implement structured goal tracking
3. Add adaptive scheduling based on engagement
4. Add progress visualization

### Phase 5: User Interface
1. Create onboarding flow
2. Build goal-setting interface
3. Add configuration options

## Technical Requirements

### LLM Setup
- Use local model (e.g., via Ollama) for privacy and cost efficiency
- Engineer prompt to act as ADHD coach with expertise in:
  - Breaking down goals
  - Providing accountability
  - Addressing ADHD-specific challenges
  - Determining follow-up timing

### Data Storage
- User profiles and preferences
- Goal structures with progress tracking
- Conversation logs with summaries
- Scheduled events queue

### Code Structure
1. `scheduler.js`: Handles timing and trigger events
2. `llm_interface.js`: Manages communication with language model
3. `messaging.js`: Handles platform integration
4. `database.js`: Manages user data and goals
5. `parser.js`: Extracts scheduling instructions from LLM output

## Sample Workflow
1. User completes initial setup (goals, preferences)
2. System schedules default morning/evening check-ins
3. At check-in time, LLM generates coaching message sent via preferred platform
4. User responds with progress update
5. LLM analyzes response, provides coaching, and suggests next check-in timing
6. System extracts timing suggestion and schedules next interaction
7. Goals and progress are updated in database

## Privacy Considerations
- Run LLM locally where possible
- Encrypt all communications and stored data
- Minimize data collection to essential coaching information

## Optimization Notes
- Focus on efficient scheduling to minimize resource usage
- Implement conversation summarization to manage context windows
- Batch process notifications when possible